proc iml;
P = {0.45 0.05 0.5,
0.21 0.24 0.55,
0.33 0.31 0.36};
q = {0.1 0.55 0.35}
n = 15;
*n = 100;
*n = 1000;
S = J(n+1,1,0);
/*Generating the Initial State*/
interval0 = J(1,3,0);
interval0[1,1] = q[1,1];
interval0[1,2] = q[1,1]+q[1,2];
interval0[1,3] = q[1,1]+q[1,2]+q[1,3];
u = ranuni(1); *seed = 1; *the uniform random variable;
if 0 < u & u <= interval0[1,1] then i0 = 1;
if interval0[1,1] < u & u <= interval0[1,2] then i0 = 2;
if interval0[1,2] < u & u <= 1 then i0 = 3;
print 'initial state =' i0;


/*generating 15 observations*/
S[1,1] = i0;
interval = J(1,3,0);
interval[1,1] = P[i0,1];
interval[1,2] = P[i0,1]+P[i0,2];
interval[1,3] = 1;
do i = 1 to n;
u = ranuni(1);
if 0 <= u & u <= interval[1,1] then S[i+1,1] = 1;
if interval[1,1] < u & u <= interval[1,2] then S[i+1,1] = 2;
if interval[1,2] < u & u <= interval[1,3] then S[i+1,1] = 3;
i0 = S[i+1,1];
interval[1,1] = P[i0,1];
interval[1,2] = P[i0,1]+P[i0,2];
interval[1,3] = 1;
end;
print S;

/*c*/
count = J(3,3,0);
do k=1 to n;
/*do i=1 to 3;
do j=1 to 3;
if S[k+1,1] = j & S[k,1] = i then count[i,j] = count[i,j]+1;
end;
end;*/
count[S[k,1],S[k+1,1]] = count[S[k,1],S[k+1,1]] + 1;
end;
print count;
Nij = count;
Ni = count[,+];
print Ni;
estimates = J(3,3,0);
do i=1 to 3;
do j=1 to 3;
estimates[i,j] = Nij[i,j]/Ni[i,1];
end;
end;
2
print P estimates;
quit;

